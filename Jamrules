# Jamrules -- the rule boilerplate for InitNG
# Copyright (C) 2009  Eric MSP Veith <eveith@wwweb-library.net>
# Licensed under GNU GPL v3, see the included file "COPYING" for details.
#
# This file contains predefined variables available throughout the whole build
# process as well as some rules needed for creating the executables and
# libraries.
# Normally, a packager or quite anyone building InitNG doesn't have to change
# anything in here, but can rely on environmental variables or the -s
# parameter to jam, e.g. OPTIM="" for compiler optimization flags.
# If you have to change something in here to make InitNG build, it is probably
# a bug, and you should contact the author of the build system.
#


### PART 1: CONFIGURATION VARIABLES
#
# This part defines a bunch of variables that are used throughout the build
# and describe certain features of InitNG, like the version number, the name,
# installation paths, and so on.
#
# These are defaults; please don't change them here unless you intent the
# change to be permanent.  Most of them are set during ./configure run, but if
# not, either use the "-s" parameter or environment variables.
#

include "config.jam" ;
if ! $(CONFIGURED)
{
    Echo "*** Error: config.jam was not found." ;
    Echo "" ;
    Echo "Please run ./configure first." ;
    Echo "If configure is not there, run: acr" ;
    Echo "" ;
    Exit "*** Not configured, stopping." ;
}

# Destination directory for package creation.
DESTDIR ?= "" ;

# Build defines. Don't add them as real parameters, just the define itself.
# Jam figures out what compiler command line switch to use itself.
DEFINES += HAVE_CONFIG_H _XOPEN_SOURCE=600 DEBUG ;

# Global C build and linker flags aside from CFLAGS passed to configure:
CCFLAGS += -std=c99 -Wall -O3 -fPIC ;
CCFLAGS += -Werror -Wmissing-prototypes -Wmissing-declarations
    -Wstrict-prototypes -Wimplicit -Wredundant-decls -Wnested-externs
    -Wwrite-strings -Wsign-compare -Winline -Wswitch -Wreturn-type
    -Wparentheses -Wmissing-braces -Wformat -Wformat-nonliteral
    -Wformat-security -Wsequence-point -Wundef -Wunused -Wcomment ;
LINKFLAGS += -rdynamic -fPIC ;


### PART 2: USER-CONFIGURABLES
#
# This section adds parameters that are configurable by the user and have
# influence on the build. They mostly enable or disable certain features of
# InitNG and are set in the configure script.
#

if 0 = $(WITH_COLORS) { DEFINES += FORCE_NOCOLOR ; }
if 1 = $(WITH_POSIXLY_IFILES) { DEFINES += FORCE_POSIX_IFILES ; }
if 1 = $(WITH_CHECK_RO) { DEFINES += CHECK_RO ; }
if 1 = $(WITH_SELINUX) { DEFINES += SELINUX ; }
if 1 = $(WITH_NGE) { DEFINES += HAVE_NGE ; }


### PART 4: CUSTOM RULES
#
# The following section houses rules that are used exclusively by InitNG's
# build system.
#

# Builds a static library from a set of subdirectories given as arguments to
# this rule. It takes care of creating the objects in the right place,
# cleaning up and running Ar. It does not, however, handle recursion.
rule LibraryFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    LibraryFromObjects $(<) : $(_o) ;
}


# Does pretty much the same as LibraryFromSubdirs, but creates an executable
# instead.
rule MainFromSubdirs
{
    local _o = [ ObjectsFromSubdir $(>) ] ;
    MainFromObjects $(<) : $(_o) ;
}


# Workhouse for subdir compile. Iterates over all subdirectories given and
# turns the *.c sources found there into objects. Returns a list of all
# objects created.
# USAGE: ObjectsFromSubdir foo bar baz ;
rule ObjectsFromSubdir
{
    local _sources _objects _subdir ;

    for _subdir in $(<)
    {
        # Get all source files
        _sources = [ Glob [ FDirName $(SUBDIR) $(_subdir) ] : *.c ] ;

        # Adjust grist (otherwise we get $(SUBDIR) twice)
        _sources = $(_sources:D=$(_subdir)) ;

        # Keep track of the objects we're about to create
        _objects += $(_sources:S=$(SUFOBJ)) ;

        # Do the actual compile
        Objects $(_sources) ;
    }

    Clean clean : $(_objects) ;
    return $(_objects) ;
}


# Creates an InitNG module from a given subdirectory. Will automatically link
# it against libinitng.a, and build a shared library named by the scheme
# "mod$(SUBDIR)$(SUF)".
rule ModuleFromSubdir
{
    local _lib = mod$(<) ;
    local _obj = [ ObjectsFromSubdir $(<) ] ;

    CCFLAGS on $(_lib) += -fPIC -rdynamic ;
    LINKFLAGS on $(_lib) += -shared -Wl,-soname,$(_lib)
        -Wl,--whole-archive [ FDirName $(TOP) src main libinitng$(SUFLIB) ]
        -Wl,--no-whole-archive -ldl ;
    MainFromObjects $(_lib).so : $(_obj) ;

    Clean clean : $(_lib) ;
    return $(_lib) ;
}


# Creates a shared library from C sources. You need to supply the target's
# file name, nothing else happens here than adding the GCC linker flags to
# turn a binary into a shared object.
# USAGE: SharedLibrary NAME : SOURCE1 SOURCE2 ... SOURCEn ;
rule SharedLibrary
{
    local _sofile _soname _soversion _somajorversion ;
    local _match = [ MATCH "([^.]*)\\.so(\\.(([0-9]+)(\\.[0-9]+)*))?" : $(<) ] ;

    _sofile = $(<) ;
    _soversion = $(_match[3]) ;
    _somajorversion = $(_match[4]) ;

    if $(_somajorversion)
    {
        _soname = $(_match[1]).so.$(_somajorversion) ;
    }
    else
    {
        _soname = $(_match[1]).so ;
    }

    NOTFILE $(_match[1]) ;
    DEPENDS $(<) : $(_match[1]) ;
    if $(<) != $(_soname)
    {
        DEPENDS $(<) : $(_soname) ;
        NOTFILE $(_soname) ;
    }


    LINKFLAGS on $(<) += -shared -Wl,-soname,$(_soname) ;
    Main $(<) : $(>) ;
}


# Sets up housekeeping for an InitNG C source directory. It is basically the
# same as SubDir, but does some additional tasks to make life easier:
#   1. Calls "SubDir",
#   2. Adds $(TOP) and $(TOP)/include to the include path.
rule SrcDir
{
    SubDir $(<) ;
    SubDirHdrs $(TOP) ;
    SubDirHdrs $(TOP) include ;
}


# Adds the headers from pkg-config output using the SubDirHdrs rule.
# Gets passed the prefix name of the variable used for pkg-config CFLAGS,
# extracts all header definitions and runs "SubDirHdrs" for each.
# USAGE: PkgConfigHdrs PREFIX
# EXAMPLE: PkgConfigHdrs DBUS ; -- Will parse DBUS_CFLAGS.
rule PkgConfigHdrs
{
    local _header_flags = [ Match "(-I[^ ]+)*" : $($(<)_CFLAGS) ] ;

    local _flag ;
    for _flag in $(_header_flags)
    {
       SubDirHdrs [ Match "-I([^ ]+)" : $(_flag) ] ;
    }
}

# Generates a soft link
# USAGE: InstallLink LINK_NAME : DIRECTORY : TARGET ;
# EXAMPLE: InstalLink foo : /tmp : bar ;
#     -- Generates a link foo->bar in folder /tmp
# EXAMPLE: InstalLink foo : /tmp : /bin/bar ;
#     -- Generates a link foo->/bin/bar in folder /tmp
rule InstallLink
{
   TARGET on $(1) = $(3) ;
   DIR on $(1) = $(2) ;
   Depends $(3) : $(1) ;
   Depends install : $(1) ;

   InstallLink1 $(1) ;
}

# Install a file into a subdirectory
# USAGE: InstallSubdirFile DIRECTORY : SUBDIR : FILENAME ;
# EXAMPLE: InstallSubdirFile /tmp : foo : bar ;
#     -- Installs file ./foo/bar into /tmp
rule InstallSubdirFile
{
   # be sure subdirectory exists
   MkDir1 "$(1)/$(2)" ;
   # make file depend on subdirectory
   Depends $(3) : "$(1)/$(2)" ;
   Depends install : $(3) ;

   InstallFile $(1) : "$(2)/$(3)" ;
}

### PART 5: ACTIONS
#
# Overwrite some default actions.
#

# Needs to be overwritten because there are errors if a directory exists
# already.
actions MkDir1
{
    mkdir -p "$(<)"
}

# Action for rule InstallLink
actions InstallLink1
{
    # be sure directory exists
    mkdir -p "$(DIR)"
    cd "$(DIR)"
    ln -sf "$(TARGET)" "$(1)"
}
